head(comm.sesmntd)
# compare ses.mpd between habitats
plot(comm.sesmpd$mpd.obs.z ~ metadata$habitat, xlab="Habitat", ylab="SES(MPD)")
abline(h=0, col="gray")
t.test(comm.sesmpd$mpd.obs.z ~ metadata$habitat)
# compare ses.mntd between habitats
plot(comm.sesmntd$mntd.obs.z ~ metadata$habitat, xlab="Habitat", ylab="SES(MNTD)")
abline(h=0, col="gray")
t.test(comm.sesmntd$mntd.obs.z ~ metadata$habitat)
# plot species present in a fescue community
plot(phy, show.tip.label=FALSE, main="Fescue community fes-K-11")
tiplabels(tip = which(phy$tip.label %in% colnames(comm)[comm["fes-K-11",]>0]), pch=19)
# plot species present in a mixedgrass community
plot(phy, show.tip.label=FALSE, main="Fescue community mix-H-23")
tiplabels(tip = which(phy$tip.label %in% colnames(comm)[comm["mix-H-23",]>0]), pch=19)
# calculate trait distance - Euclidean distance among scaled trait values - we want the full distance matrix
trait.dist <- as.matrix(dist(scale(traits), method="euclidean"))
# calculate trait ses.mpd
comm.sesmpd.traits <- ses.mpd(comm, trait.dist, null.model="richness", abundance.weighted=FALSE, runs=999)
# compare trait ses.mpd between habitats
plot(comm.sesmpd.traits$mpd.obs.z ~ metadata$habitat, xlab="Habitat", ylab="Trait SES(MPD)")
abline(h=0, col="gray")
# calculate phylogenetic MNTD beta diversity
comm.mntd.dist <- comdistnt(comm, phy.dist, abundance.weighted=TRUE)
# calculate functional trait MNTD beta diversity
comm.mntd.traits.dist <- comdistnt(comm, trait.dist, abundance.weighted=TRUE)
# calculate Mantel correlation for taxonomic Bray-Curtis vs. phylogenetic MNTD diversity
mantel(comm.bc.dist, comm.mntd.dist)
# calculate Mantel correlation for taxonomic Bray-Curtis vs. trait MNTD diversity
mantel(comm.bc.dist, comm.mntd.traits.dist)
# NMDS ordination of phylogenetic distances - use monoMDS since we only have among-sample distances
comm.mntd.mds <- monoMDS(comm.mntd.dist)
# set up the plotting area but don't plot anything yet
mds.fig <- ordiplot(comm.mntd.mds, type="none")
# plot just the samples, colour by habitat, pch=19 means plot a circle
points(mds.fig, "sites", pch=19, col="green", select=metadata$habitat=="Fescue")
points(mds.fig, "sites", pch=19, col="blue", select=metadata$habitat=="Mixedgrass")
# add confidence ellipses around habitat types
ordiellipse(comm.mntd.mds, metadata$habitat, conf=0.95, label=TRUE)
# NMDS ordination of trait distances - use monoMDS since we only have among-sample distances
comm.mntd.traits.mds <- monoMDS(comm.mntd.traits.dist)
# set up the plotting area but don't plot anything yet
mds.fig <- ordiplot(comm.mntd.traits.mds, type="none")
# plot just the samples, colour by habitat, pch=19 means plot a circle
points(mds.fig, "sites", pch=19, col="green", select=metadata$habitat=="Fescue")
points(mds.fig, "sites", pch=19, col="blue", select=metadata$habitat=="Mixedgrass")
# add confidence ellipses around habitat types
ordiellipse(comm.mntd.traits.mds, metadata$habitat, conf=0.95, label=TRUE)
# Taxonomic (Bray-Curtis) dissimilarity explained
adonis(comm.bc.dist ~ habitat, data=metadata)
# Phylogenetic dissimilarity explained
adonis(comm.mntd.dist ~ habitat, data=metadata)
# Trait dissimilarity explained
adonis(comm.mntd.traits.dist ~ habitat, data=metadata)
knitr::opts_chunk$set(echo = TRUE)
heritability <- function(Nf = 0, No = 0, h2 = 0.0){
x <- NULL
for (j in 1:Nf) {
parent1 <- sample(c(0,1,2), replace = F)[1]
parent2 <- sample(c(0,1,2), replace = F)[1]
offspring <- NULL
i <- 0
for (i in 1:No) {
offspring[i] <- h2 * (0.5 * (parent1 + parent2)) + rnorm(1,0.01)
}
x <- rbind(x, c(parent1, parent2, (parent1+parent2)/2, mean(offspring)))
}
x <- as.data.frame(x)
names(x) <- c("p1","p2","mid_Parent","mean_Offspring")
plot(x$mean_Offspring ~ x$mid_Parent, pch = 16, ylab = "mean offspring value",
xlab = "mid-parent value")
x.lm <- lm(mean_Offspring ~ mid_Parent, data = x)
slope <- coef(x.lm)[2]
abline(x.lm)
options(digits=2)
print(paste("slope of parent-offspring regression = ",slope))
}
heritability <- function(Nf = 0, No = 0, h2 = 0.0){
x <- NULL
for (j in 1:Nf) {
parent1 <- sample(c(0,1,2), replace = F)[1]
parent2 <- sample(c(0,1,2), replace = F)[1]
offspring <- NULL
i <- 0
for (i in 1:No) {
offspring[i] <- h2 * (0.5 * (parent1 + parent2)) + rnorm(1,0.01)
}
x <- rbind(x, c(parent1, parent2, (parent1+parent2)/2, mean(offspring)))
}
x <- as.data.frame(x)
names(x) <- c("p1","p2","mid_Parent","mean_Offspring")
plot(x$mean_Offspring ~ x$mid_Parent, pch = 16, ylab = "mean offspring value",
xlab = "mid-parent value")
x.lm <- lm(mean_Offspring ~ mid_Parent, data = x)
slope <- coef(x.lm)[2]
abline(x.lm)
options(digits=2)
print(paste("slope of parent-offspring regression = ",slope))
}
heritability <- function(Nf = 10, No = 10, h2 = 0.5){
x <- NULL
for (j in 1:Nf) {
parent1 <- sample(c(0,1,2), replace = F)[1]
parent2 <- sample(c(0,1,2), replace = F)[1]
offspring <- NULL
i <- 0
for (i in 1:No) {
offspring[i] <- h2 * (0.5 * (parent1 + parent2)) + rnorm(1,0.01)
}
x <- rbind(x, c(parent1, parent2, (parent1+parent2)/2, mean(offspring)))
}
x <- as.data.frame(x)
names(x) <- c("p1","p2","mid_Parent","mean_Offspring")
plot(x$mean_Offspring ~ x$mid_Parent, pch = 16, ylab = "mean offspring value",
xlab = "mid-parent value")
x.lm <- lm(mean_Offspring ~ mid_Parent, data = x)
slope <- coef(x.lm)[2]
abline(x.lm)
options(digits=2)
print(paste("slope of parent-offspring regression = ",slope))
}
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation <- function(forward = 0.00, reverse = 0.00, start_freq = 0.5, generations = 1000)
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation(forward = 0.001, reverse = 0.01, start_freq = seq(0.0, 1.0, by = 0.1), generations = 1000)
# initial genotype frequencies
AA_counts <- 11
Aa_counts <- 43
aa_counts <- 0
# initial genotype frequencies
AA <- 11
Aa <- 43
aa <- 0
num.alleles <- 2*sum(AA,Aa,aa)
# allele probabilities
p <- (2 * AA + Aa) / 2 * sum(AA,Aa,aa)
q <- (2 * aa + Aa) / 2 * sum(AA,Aa,aa)
chisq.test(c(AA,Aa,aa),p=c(p^2, 2 * p * q, q^2))
chisq.test(c(AA,Aa,aa), p=c(p^2, 2 * p * q, q^2))
chisq.test(c(AA/num.alleles,Aa/num.alleles,aa/num.alleles), p=c(p^2, 2 * p * q, q^2))
chisq.test(c(AA_freq, Aa_freq, aa_freq), p=c(p^2, 2 * p * q, q^2))
# initial genotype counts
AA <- 11
Aa <- 43
aa <- 0
num.alleles <- 2*sum(AA,Aa,aa)
AA_freq <- AA/(AA+Aa+aa)
Aa_freq <- Aa/(AA+Aa+aa)
aa_freq <- aa/(AA+Aa+aa)
# allele probabilities
p <- (2 * AA + Aa) / 2 * sum(AA,Aa,aa)
q <- (2 * aa + Aa) / 2 * sum(AA,Aa,aa)
chisq.test(c(AA_freq, Aa_freq, aa_freq), p=c(p^2, 2 * p * q, q^2))
# initial genotype frequencies
AA_counts <- 11
Aa_counts <- 43
aa_counts <- 0
# total number of alleles, allele frequencies and probabilities
num.alleles <- 2*sum(AA_counts,Aa_counts,aa_counts)
num.a.alleles <- 2*aa_counts + Aa_counts
num.A.alleles <- 2*AA_counts + Aa_counts
p <- num.A.alleles / num.alleles
q <- num.a.alleles / num.alleles
# Expected genotype probabilities in the F1
expected.AA <- p^2
expected.Aa <- 2 * p * q
expected.aa <- q^2
# Expected genotype frequencies in the F1
E.AA <- expected.AA * num.alleles/2
E.Aa <- expected.Aa * num.alleles/2
E.aa <- expected.aa * num.alleles/2
# Calculate the chi squared statistic
chi.sq <- ((AA-E.AA)^2 - E.AA) / E.AA  +
((Aa-E.Aa)^2 - E.Aa) / E.Aa  +
((aa-E.aa)^2 - E.aa) / E.aa
1- pchisq(20.63219,df = 2)
# Calculate the chi squared statistic
chi.sq <- ((AA-E.AA)^2 - E.AA) / E.AA  +
((Aa-E.Aa)^2 - E.Aa) / E.Aa  +
((aa-E.aa)^2 - E.aa) / E.aa
print(chi.sq)
knitr::opts_chunk$set(echo = TRUE)
forward_reverse_mutation <- function(forward = 0.00, reverse = 0.00, start_freq = 0.5, generations = 1000)
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation(forward = 0.001, reverse = 0.01, start_freq = seq(0.0, 1.0, by = 0.1), generations = 1000)
forward_reverse_mutation <- function(forward = 0.00, reverse = 0.00, start_freq = 0.5, generations = 1000)
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation(forward = 0.01, reverse = 0.01, start_freq = seq(0.0, 1.0, by = 0.1), generations = 1000)
forward_reverse_mutation <- function(forward = 0.00, reverse = 0.00, start_freq = 0.5, generations = 1000)
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation(forward = 0.01, reverse = 0.00001, start_freq = seq(0.0, 1.0, by = 0.1), generations = 1000)
forward_reverse_mutation <- function(forward = 0.00, reverse = 0.00, start_freq = 0.5, generations = 1000)
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation(forward = 0.01, reverse = 0.00001, start_freq = seq(0.0, 1.0, by = 0.01), generations = 1000)
forward_reverse_mutation <- function(forward = 0.00, reverse = 0.00, start_freq = 0.5, generations = 1000)
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation(forward = 0.01, reverse = 0.00001, start_freq = seq(0.0, 1.0, by = 0.2), generations = 1000)
forward_reverse_mutation <- function(forward = 0.00, reverse = 0.00, start_freq = 0.5, generations = 1000)
{
freq <- start_freq + (1-start_freq)*forward - start_freq*reverse
freq_array = NULL
freq_array <- rbind(freq_array, start_freq, freq)
for (j in 1:generations) {
freq <- freq + (1-freq)*forward - freq*reverse
freq_array <- rbind(freq_array, freq)
}
matplot (freq_array, xlab="generations", ylab="Equilibrium frequency of the A1 allele", ylim=c(0:1.0), type="l", col = 1:20)
legend(600, 1, start_freq, col = 1:20, lty = 1:20)
}
forward_reverse_mutation(forward = 0.01, reverse = 0.01, start_freq = seq(0.0, 1.0, by = 0.2), generations = 1000)
# initial genotype frequencies
AA_counts <- 11
Aa_counts <- 43
aa_counts <- 0
# total number of alleles, allele frequencies and probabilities
num.alleles <- 2*sum(AA_counts,Aa_counts,aa_counts)
num.a.alleles <- 2*aa_counts + Aa_counts
num.A.alleles <- 2*AA_counts + Aa_counts
p <- num.A.alleles / num.alleles
q <- num.a.alleles / num.alleles
# Expected genotype probabilities in the F1
expected.AA <- p^2
expected.Aa <- 2 * p * q
expected.aa <- q^2
# Expected genotype frequencies in the F1
E.AA <- expected.AA * num.alleles/2
E.Aa <- expected.Aa * num.alleles/2
E.aa <- expected.aa * num.alleles/2
# Calculate the chi squared statistic
chi.sq <- ((AA-E.AA)^2 - E.AA) / E.AA  +
((Aa-E.Aa)^2 - E.Aa) / E.Aa  +
((aa-E.aa)^2 - E.aa) / E.aa
print(chi.sq)
1- pchisq(20.63219,df = 2)
libray (vegan)
library (vegan)
yeast_data <- read.table('yeast.tsv', row.names = 1, header = T, sep = '\t')
library (vegan)
yeast_data <- read.table('data\yeast.tsv', row.names = 1, header = T, sep = '\t')
library (vegan)
yeast_data <- read.table('data/yeast.tsv', row.names = 1, header = T, sep = '\t')
head (yeast_data)
vare.dis <- vegdist(decostand(yeast_data, "hell"), "euclidean")
print (vare.dis)
vare.mds0 <- monoMDS(vare.dis)
print (vare.mds0)
stressplot(vare.mds0, vare.dis)
ordiplot (vare.mds0, type = "t")
vare.mds <- metaMDS(yeast_data, trace = F)
plot (vare.mds, type = "t")
vare.pca <- rda(yeast_data, scale = TRUE)
print (vare.pca)
plot (vare.pca, scaling = -1)
plot (vare.pca, scaling = 1)
plot (vare.pca, scaling = 2)
plot (vare.pca, scaling = 3)
biplot (vare.pca, scaling = -1)
biplot (vare.pca, scaling = 1)
clus.dis1 <- vegdist(yeast_data)
clus.dis2 <- vegdist(decostand(yeast_data, "hell"), "euclidean")
clus.dis1 <- vegdist(yeast_data)
clus.dis2 <- vegdist(decostand(yeast_data, "hell"), "euclidean")
cluster <- hclust(clus.dis1, "single")
plot(cluster)
cluster_complete <- hclust(clus.dis1, "complete")
plot(cluster_complete)
cluster_average <- hclust(clus.dis1, "average")
plot(cluster_average)
plot(cluster)
rect.hclust(cluster, 4)
grp <- cutree(cluster, 4)
print (grp)
load("R_biodiversity_workspace.RData")
library(picante)
# read community data
# use plot IDs as rownames (first column of data)
# use species names as colnames (default read.csv is header=TRUE)
# replace filename with file.choose() to open interactive window
comm <- read.csv("data/grassland.community.csv", header=TRUE, row.names=1)
class(comm)
# get the dimension of the community object (rows x columns)
dim(comm)
rownames(comm)
head(colnames(comm))
# take a peek at the data (just the first five rows/columns)
comm[1:5, 1:5]
# check total abundance in each sample
apply(comm, 1, sum)
# Turn percent cover to relative abundance by dividing each value by sample total abundance
comm <- decostand(comm, method="total")
# check total abundance in each sample
apply(comm, 1, sum)
# look at the transformed data
comm[1:5, 1:5]
# replace filename with file.choose() to open interactive window
traits <- read.csv("data/species.traits.csv", header=TRUE, row.names=1)
# take a peek at the data
head(traits)
# plot the data
pairs(traits)
# some variables look skewed - log transform all variables
traits <- log10(traits)
# plot the transformed data
pairs(traits)
# replace filename with file.choose() to open interactive window
metadata <- read.csv("data/plot.metadata.csv", header=TRUE, row.names=1)
# take a peek at the data
head(metadata)
# replace filename with file.choose() to open interactive window
phy <- read.tree("data/grassland.phylogeny.newick")
class(phy)
phy
# list the elements of our phylogeny
names(phy)
# what are the first few tip labels?
phy$tip.label[1:5]
# how many tips does our phylogeny have?
Ntip(phy)
# plot our phylogeny (the cex argument makes the labels small enough to read)
plot(phy, cex=0.5)
ls()
# check for mismatches/missing species
combined <- match.phylo.comm(phy, comm)
# the resulting object is a list with $phy and $comm elements.
# replace our original data with the sorted/matched data
phy <- combined$phy
comm <- combined$comm
combined <- match.phylo.data(phy, traits)
# the resulting object is a list with $phy and $data elements.
# replace our original data with the sorted/matched data
phy <- combined$phy
traits <- combined$data
all.equal(rownames(comm), rownames(metadata))
# they all match - if they didn't we could sort them to the same order
# sort metadata rows to be in the same order as community rows
metadata <- metadata[rownames(comm), ]
# compare species richness between fescue and mixedgrass habitats
boxplot(specnumber(comm) ~ metadata$habitat, ylab="# of species")
# statistical test of difference
t.test(specnumber(comm) ~ metadata$habitat)
# plot species accumulion curve across samples
plot(specaccum(comm), xlab="# of samples", ylab="# of species")
# calculate Bray-Curtis distance among samples
comm.bc.dist <- vegdist(comm, method="bray")
# cluster communities using average-linkage algorithm
comm.bc.clust <- hclust(comm.bc.dist, method="average")
# plot cluster diagram
plot(comm.bc.clust, ylab="Bray-Curtis dissimilarity")
# The metaMDS function automatically transforms data and checks solution robustness
comm.bc.mds <- metaMDS(comm, dist="bray")
# Assess goodness of ordination fit (stress plot)
stressplot(comm.bc.mds)
# plot site scores as text
ordiplot(comm.bc.mds, display="sites", type="text")
# automated plotting of results - tries to eliminate overlapping labels
ordipointlabel(comm.bc.mds)
# ordination plots are highly customizable
# set up the plotting area but don't plot anything yet
mds.fig <- ordiplot(comm.bc.mds, type="none")
# plot just the samples, colour by habitat, pch=19 means plot a circle
points(mds.fig, "sites", pch=19, col="green", select=metadata$habitat=="Fescue")
points(mds.fig, "sites", pch=19, col="blue", select=metadata$habitat=="Mixedgrass")
# add confidence ellipses around habitat types
ordiellipse(comm.bc.mds, metadata$habitat, conf=0.95, label=TRUE)
# overlay the cluster results we calculated earlier
ordicluster(comm.bc.mds, comm.bc.clust, col="gray")
# plot Sphaeralcea abundance. cex increases the size of bubbles.
ordisurf(comm.bc.mds, comm[,"Sphaeralcea_coccinea"], bubble=TRUE, main="Sphaeralcea coccinea abundance", cex=3)
ordiplot(comm.bc.mds)
# calculate and plot environmental variable correlations with the axes
# use the subset of metadata that are environmental data
plot(envfit(comm.bc.mds, metadata[,3:6]))
# one way to do it - apply the Kcalc function to each column of the data.frame
apply(traits, 2, Kcalc, phy)
# another way to do it with significance testing
# we have to convert the tree to be dichotomous before calculating P-values
multiPhylosignal(traits, multi2di(phy))
# Plot phylogeny facing upwards. Show node labels but not tip labels. cex shrinks labels.
plot(phy, direction="up", show.tip.label = FALSE, show.node.label=TRUE, cex=0.7)
# Plot leaf area on the phylogeny. cex argument scales symbol size by trait value.
tiplabels(pch = 19, col="black", cex = 3*(traits[,"LeafArea"] / max(traits[,"LeafArea"])))
# GLS of root tissue density as a function of SRL - non-phylogenetic model
root.gls <- gls(RootTissueDens ~ SRL, data=traits)
anova(root.gls)
# Phylogenetic GLS - adds effect of phylogeny to the model
root.pgls <- gls(RootTissueDens ~ SRL, correlation=corBrownian(value=1,phy), data=traits)
anova(root.pgls)
# plot relationship
plot(RootTissueDens ~ SRL, data=traits, xlab="SRL (specific root length)", ylab="Root tissue density")
# add model fit lines - coef is the model fit coefficients, lwd increases line width
abline(coef(root.gls), lwd=2, col="black")
abline(coef(root.pgls), lwd=2, col="red")
legend("bottomleft", legend=c("GLS fit","Phylogenetic GLS fit"), lwd=2, col=c("black","red"))
# Calculate Faith's PD
comm.pd <- pd(comm, phy)
head(comm.pd)
# Plot Faith's PD by habitat
boxplot(comm.pd$PD ~ metadata$habitat, xlab="Habitat", ylab="Faith's PD")
# Test for PD differences among habitats
t.test(comm.pd$PD ~ metadata$habitat)
# Compare PD and species richness
plot(comm.pd$PD ~ comm.pd$SR, xlab="Species richness", ylab="Faith's PD")
# convert phylogenety to a distance matrix
phy.dist <- cophenetic(phy)
# calculate ses.mpd
comm.sesmpd <- ses.mpd(comm, phy.dist, null.model="richness", abundance.weighted=FALSE, runs=999)
head(comm.sesmpd)
# calculate ses.mntd
comm.sesmntd <- ses.mntd(comm, phy.dist, null.model="richness", abundance.weighted=FALSE, runs=999)
head(comm.sesmntd)
# compare ses.mpd between habitats
plot(comm.sesmpd$mpd.obs.z ~ metadata$habitat, xlab="Habitat", ylab="SES(MPD)")
abline(h=0, col="gray")
t.test(comm.sesmpd$mpd.obs.z ~ metadata$habitat)
# compare ses.mntd between habitats
plot(comm.sesmntd$mntd.obs.z ~ metadata$habitat, xlab="Habitat", ylab="SES(MNTD)")
abline(h=0, col="gray")
t.test(comm.sesmntd$mntd.obs.z ~ metadata$habitat)
# plot species present in a fescue community
plot(phy, show.tip.label=FALSE, main="Fescue community fes-K-11")
tiplabels(tip = which(phy$tip.label %in% colnames(comm)[comm["fes-K-11",]>0]), pch=19)
# plot species present in a mixedgrass community
plot(phy, show.tip.label=FALSE, main="Fescue community mix-H-23")
tiplabels(tip = which(phy$tip.label %in% colnames(comm)[comm["mix-H-23",]>0]), pch=19)
# calculate phylogenetic MNTD beta diversity
comm.mntd.dist <- comdistnt(comm, phy.dist, abundance.weighted=TRUE)
# calculate functional trait MNTD beta diversity
comm.mntd.traits.dist <- comdistnt(comm, trait.dist, abundance.weighted=TRUE)
# calculate Mantel correlation for taxonomic Bray-Curtis vs. phylogenetic MNTD diversity
mantel(comm.bc.dist, comm.mntd.dist)
# calculate Mantel correlation for taxonomic Bray-Curtis vs. trait MNTD diversity
mantel(comm.bc.dist, comm.mntd.traits.dist)
# Taxonomic (Bray-Curtis) dissimilarity explained
adonis(comm.bc.dist ~ habitat, data=metadata)
# Phylogenetic dissimilarity explained
adonis(comm.mntd.dist ~ habitat, data=metadata)
# Trait dissimilarity explained
adonis(comm.mntd.traits.dist ~ habitat, data=metadata)
# silently save an image of the workspace
save.image("R_biodiversity_workspace.RData")
# silently save an image of the workspace
save.image("R_biodiversity_workspace.RData")
